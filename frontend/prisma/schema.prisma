// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model User {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    username        String?   @unique
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    password        String?
    followingIds    String[]  @db.ObjectId
    hasNotification Boolean?

    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    notifications Notification[]

    @@map("users")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    body      Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authorId String @db.ObjectId
    user     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

    comments Comment[]
    tags     String[]
    shares   Int?      @default(0)
    likedIds String[]  @db.ObjectId
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String @db.ObjectId
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
